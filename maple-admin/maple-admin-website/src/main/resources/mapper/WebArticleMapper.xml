<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.maple.website.mapper.WebArticleMapper">

    <select id="getPageList" resultType="com.maple.website.vo.model.WebArticleModel">
        select
        t1.*,
        t2.id as `categoryModel.id`,
        t2.icon as `categoryModel.icon`,
        t2.name as `categoryModel.name`,
        t3.is_read as isRead,
        t3.is_collect as isCollect,
        t3.is_like as isLike,
        t3.is_download as isDownload
        from web_article t1
        left join web_category t2 on t1.category_id = t2.id
        left join web_user_operation t3 on t1.id = t3.data_id and t3.is_delete = 0 and t3.user_id = #{req.userId}
        <where>
            <if test="req.status != null and req.status != ''">
                and t1.status = #{req.status}
            </if>
            <if test="req.categoryId != null">
                and t1.category_id = #{req.categoryId}
            </if>
            <if test="req.dataType != null">
                and t1.data_type = #{req.dataType}
            </if>
            <if test="req.dataKind != null">
                and t1.data_kind = #{req.dataKind}
            </if>
            <if test="req.categoryIdList != null and req.categoryIdList.size > 0">
                and t1.category_id in
                <foreach collection="req.categoryIdList" item="categoryId" open="(" separator="," close=")">
                    #{categoryId}
                </foreach>
            </if>
            <if test="req.title != null and req.title != ''">
                and t1.title like concat ('%', #{req.title}, '%')
            </if>
            <if test="req.description != null and req.description != ''">
                and (t1.title like concat ('%', #{req.description}, '%')
                or t1.description like concat ('%', #{req.description}, '%')
                )
            </if>
            <if test="req.isHot != null">
                and t1.is_hot = #{req.isHot}
            </if>
            <if test="req.isCollect != null">
                and t3.is_collect = #{req.isCollect}
            </if>
            <if test="req.isDownload != null">
                and t3.is_download = #{req.isDownload}
            </if>
            <if test="req.isRead != null">
                and t3.is_read = #{req.isRead}
            </if>
        </where>
        group by t1.id
        <choose>
            <when test="req.isRead != null">
                order by t3.update_time desc
            </when>
            <when test="req.isCollect != null">
                order by t3.create_time desc
            </when>
            <when test="req.isNew != null">
                order by t1.create_time desc
            </when>
            <when test="req.categoryId != null">
                order by t1.is_top desc, t1.sort_num, t1.id
            </when>
            <otherwise>
                order by t1.is_top desc, t1.id desc
            </otherwise>
        </choose>
    </select>

    <select id="selectReadAndCollectNum" resultType="com.maple.website.vo.model.WebCategoryModel">
        select SUM(read_num)    as readNum,
               SUM(collect_num) as collectNum,
               COUNT(*)         AS titleNum
        from web_article
        where category_id = #{categoryId}
    </select>

    <select id="getPreviousTitle" resultType="com.maple.website.vo.model.WebArticleModel">
        SELECT id, title
        FROM web_article
        WHERE category_id = #{req.categoryId}
          AND sort_num = (
            select max(sort_num)
            from web_article
            where status = 1
              and sort_num &lt; #{req.sortNum}
              and category_id = #{req.categoryId}
            order by is_top desc, sort_num, id)
    </select>

    <select id="getNextTitle" resultType="com.maple.website.vo.model.WebArticleModel">
        SELECT id, title
        FROM web_article
        WHERE category_id = #{req.categoryId}
          AND sort_num = (
            select min(sort_num)
            from web_article
            where status = 1
              and sort_num > #{req.sortNum}
              and category_id = #{req.categoryId}
            order by is_top desc, sort_num, id)
    </select>

    <select id="getMaxSortNum" resultType="java.lang.Long">
        select max(sort_num) + 10
        from web_article
        where category_id = #{categoryId}
    </select>
    <select id="selectArticleList" resultType="com.maple.common.lucene.LuceneDataModel">
        select t1.id,
               t1.title,
               t1.description,
               t1.original_url,
               t1.img              as imageUrl,
               t1.data_type         as type,
               t2.original_content as content
        from web_article t1
                 left join web_content t2 on t1.id = t2.article_id
        where t1.status = 1
    </select>
</mapper>