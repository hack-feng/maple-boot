<template>
  <div class="${moduleName}-${className}-container layout-padding">
    <el-card shadow="hover" class="layout-padding-auto">
      <div class="${moduleName}-${className}-search">
        <el-form :inline="true" ref="${className}SearchRef" :model="state.tableData.param.query" size="default">
          <el-row>
#foreach($column in $columns)
#if($column.isQuery)
    #set($dictType=$column.dictType)
    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    #set($parentheseIndex=$column.columnComment.indexOf("（"))
    #if($parentheseIndex != -1)
        #set($comment=$column.columnComment.substring(0, $parentheseIndex))
    #else
        #set($comment=$column.columnComment)
    #end
#if($column.htmlType == "input")
            <el-form-item label="${comment}" class="ml20" size="default">
              <el-input v-model="state.tableData.param.query.${column.javaField}" placeholder="请输入${comment}" clearable
                      style="max-width: 180px"></el-input>
            </el-form-item>
#elseif(($column.htmlType == "select" || $column.htmlType == "radio") && "" != $dictType)
            <el-form-item label="${comment}" class="ml20" prop="${column.javaField}">
              <el-select v-model="state.tableData.param.query.${column.javaField}" placeholder="请选择${comment}" clearable>
                <el-option
                  v-for="dict in $dictType"
                    #if($column.javaType == "Long" || $column.javaType == "Integer" || $column.javaType == "Boolean")
                    :key="Number(dict.value)"
                    #else
                    :key="dict.value"
                    #end
                    :label="dict.label"
                    #if($column.javaType == "Long" || $column.javaType == "Integer" || $column.javaType == "Boolean")
                    :value="Number(dict.value)"
                    #else
                    :value="dict.value"
                    #end
                />
              </el-select>
            </el-form-item>
#elseif(($column.htmlType == "select" || $column.htmlType == "radio") && $dictType)
            <el-form-item label="${comment}" class="ml20"  prop="${column.javaField}">
              <el-select v-model="state.tableData.param.query.${column.javaField}" placeholder="请选择${comment}" clearable>
                <el-option label="请选择字典生成" value="" />
              </el-select>
            </el-form-item>
#elseif($column.htmlType == "datetime" && $column.queryType != "BETWEEN")
            <el-form-item label="${comment}" class="ml20" prop="${column.javaField}">
              <el-date-picker clearable
                              v-model="state.tableData.param.query.${column.javaField}"
                              type="date"
                              value-format="yyyy-MM-dd"
                              placeholder="选择${comment}">
              </el-date-picker>
            </el-form-item>
#elseif($column.htmlType == "datetime" && $column.queryType == "BETWEEN")
            <el-form-item label="${comment}" class="ml20" >
              <el-date-picker
                  clearable
                  v-model="daterange${AttrName}"
                  style="width: 240px"
                  value-format="yyyy-MM-dd"
                  type="daterange"
                  range-separator="-"
                  start-placeholder="开始日期"
                  end-placeholder="结束日期"
              ></el-date-picker>
            </el-form-item>
#end
#end
#end
            <el-button size="default" type="primary" class="ml20" @click="getTableData">
              <el-icon><ele-Search /></el-icon> 查询
            </el-button>
            <el-button size="default" class="ml20" @click="resetQuery">
              <el-icon><ele-Refresh /></el-icon> 重置
            </el-button>
          </el-row>
        </el-form>
      </div>
      <el-row :gutter="35">
          <el-button size="default" type="success" plain class="ml30" @click="onOpenAdd('add')">
            <el-icon><ele-FolderAdd /></el-icon> 新增
          </el-button>
      </el-row>
      <el-table :data="state.tableData.records" v-loading="state.tableData.loading" style="width: 100%">
        <el-table-column type="index" label="序号" width="60" />
#foreach($column in $columns)
  #set($javaField=$column.javaField)
  #set($parentheseIndex=$column.columnComment.indexOf("（"))
  #if($parentheseIndex != -1)
      #set($comment=$column.columnComment.substring(0, $parentheseIndex))
  #else
      #set($comment=$column.columnComment)
  #end
  #if($column.isPk)
        <el-table-column label="${comment}" prop="${javaField}" show-overflow-tooltip/>
  #elseif($column.isList && $column.htmlType == "switch")
        <el-table-column label="${comment}" prop="${javaField}" show-overflow-tooltip>
          <template #default="scope">
            <el-tag type="success" v-if="scope.row.${javaField}">是</el-tag>
            <el-tag type="info" v-else>否</el-tag>
          </template>
        </el-table-column>
  #elseif($column.isList && $column.htmlType == "datetime")
        <el-table-column label="${comment}" prop="${javaField}" show-overflow-tooltip>
          <template #default="scope">
            <span>{{ parseDateTime(scope.row.${javaField}) }}</span>
          </template>
        </el-table-column>
  #elseif($column.isList && "" != $column.dictType)
        <el-table-column label="${comment}" prop="${javaField}" show-overflow-tooltip>
          <template #default="scope">
              #set($flagStart = '[scope.row.')
            <el-tag :type="$column.dictType$flagStart${javaField}].elTagType">{{ $column.dictType$flagStart${javaField}].label }}</el-tag>
          </template>
        </el-table-column>
  #elseif($column.isList && $column.htmlType == "imageUpload")
        <el-table-column label="${comment}" prop="${javaField}" show-overflow-tooltip>
          <template #default="scope">
            <el-image
                :src="scope.row.${javaField}"
                :zoom-rate="1.2"
                :preview-src-list="[scope.row.${javaField}]"
                preview-teleported
                fit="cover"
            />
          </template>
        </el-table-column>
  #elseif($column.isList && "" != $javaField)
        <el-table-column label="${comment}" prop="${javaField}" show-overflow-tooltip/>
  #end
#end
        <el-table-column label="操作" width="100">
          <template #default="scope">
            <el-button size="small" text type="primary" @click="onOpenEdit('edit', scope.row)">修改</el-button>
            <el-button size="small" text type="primary" @click="onRowDel(scope.row)">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
      <el-pagination
          @size-change="onHandleSizeChange"
          @current-change="onHandleCurrentChange"
          class="mt15"
          :pager-count="5"
          :page-sizes="[10, 20, 30]"
          v-model:current-page="state.tableData.param.page.current"
          background
          v-model:page-size="state.tableData.param.page.size"
          layout="total, sizes, prev, pager, next, jumper"
          :total="state.tableData.total"
      >
      </el-pagination>
    </el-card>
    <${ClassName}Dialog ref="${className}DialogRef" @refresh="getTableData()" />
  </div>
</template>

<script setup lang="ts" name="${className}">
  import { defineAsyncComponent, reactive, onMounted, ref, nextTick, getCurrentInstance } from 'vue';
  import { ElMessageBox, ElMessage } from 'element-plus';
  import { use${ClassName}Api } from '/@/api/${moduleName}/${className}';
  import { parseDateTime } from '/@/utils/formatTime';
  
#if(${dictTypeKey} != "")
  // 获取字典
  const { proxy } = getCurrentInstance();
  const { ${dictTypeKey} } = proxy.parseDict(${dictTypeValue});
  
#end
  // 引入组件
  const ${ClassName}Dialog = defineAsyncComponent(() => import('./dialog.vue'));

  // 定义变量内容
  const ${className}DialogRef = ref();
  const ${className}SearchRef = ref();
  const use${ClassName} = use${ClassName}Api();
  const state = reactive({
    tableData: {
      records: [],
      total: 0,
      loading: false,
      param: {
        page: {
          current: 1,
          size: 10,
        },
        query: {
#foreach($column in $columns)
  #if($column.isQuery)
          $column.javaField: '',
  #end
#end
        },
      },
    },
  });

  // 初始化表格数据
  const getTableData = () => {
    state.tableData.loading = true;
    use${ClassName}.getPageList(state.tableData.param).then(res => {
      state.tableData.records = res.records;
      state.tableData.total = res.total;
    });
    setTimeout(() => {
      state.tableData.loading = false;
    }, 500);
  };
  // 打开新增${functionName}弹窗
  const onOpenAdd = (type: string) => {
    ${className}DialogRef.value.openDialog(type);
  };
  // 打开修改${functionName}弹窗
  const onOpenEdit = (type: string, row) => {
    ${className}DialogRef.value.openDialog(type, row);
  };
  // 删除${functionName}
  const onRowDel = (row) => {
    ElMessageBox.confirm('此操作将永久删除数据，是否继续?', '提示', {
      confirmButtonText: '确认',
      cancelButtonText: '取消',
      type: 'warning',
    })
        .then(() => {
          use${ClassName}.delete${ClassName}(row.id).then(() => {
            getTableData();
            ElMessage.success('删除成功');
          });
        })
        .catch(() => {
          ElMessage.error('删除失败');
        });
  };
  // 重置搜索框
  const resetQuery = () => {
    nextTick(() => {
        ${className}SearchRef.value.resetFields();
    });
  }
  // 分页改变
  const onHandleSizeChange = (val: number) => {
    state.tableData.param.page.size = val;
    getTableData();
  };
  // 分页改变
  const onHandleCurrentChange = (val: number) => {
    state.tableData.param.page.current = val;
    getTableData();
  };
  // 页面加载时
  onMounted(() => {
    getTableData();
  });
</script>

<style scoped lang="scss">
  .${moduleName}-${className}-container {
    :deep(.el-card__body) {
      display: flex;
      flex-direction: column;
      flex: 1;
      overflow: auto;
      .el-table {
        flex: 1;
      }
    }
  }
</style>
